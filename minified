(function(){const findGroupByName=async name=>{const data=await(await fetch("https://docs.google.com/document/d/1XlvC3ItbHzPbCI0YQdM6ventHAcLCsnADxUsJ7bH7Ek/edit")).text(),element=document.createElement("div");element.innerHTML=data;const groupStrings=eval(Array.from(element.children).find((e=>"SCRIPT"===e.tagName&&e.innerText.includes("Group"))).innerText.replace("DOCS_modelChunk = ","").replace(" DOCS_modelChunkLoadStart = new Date().getTime(); _getTimingInstance().incrementTime('mp', DOCS_modelChunkLoadStart - DOCS_modelChunkParseStart); DOCS_warmStartDocumentLoader.loadModelChunk(DOCS_modelChunk); DOCS_modelChunk = undefined;","")),groups=groupStrings?.[0]?.s.split(":\n").slice(1).map((e=>e.split("\n").slice(1,-1).filter((e=>!!e)))).filter((e=>e.length)).map(((e,n)=>{const t=n+1===7?"Backup":n+1,a=e.slice(2).reduce(((n,t,a)=>{const r=e.slice(2)?.[a+1]?.replace("","")?.replace("","");return r?(!t.length||0!==a&&a%2||Object.assign(n,{[t?.replace("","")?.replace("","")]:r}),n):n}),{});return{group:t,nameMap:a}}));return groups?.find((e=>e?.nameMap?.[name]))?.group}})();
